import Data.Char

type Bit = Int

bin2int :: [Bit] -> Int
bin2int bits = sum [w*b | (w, b) <- zip weights bits]
                where weights = iterate (*2) 1

bin2int' bits = foldr (\x y -> x + 2 * y) 0

int2bin :: Int -> [Bit]
int2bin 0 = []
int2bin n = n `mod` 2 : int2bin (n `div` 2)

make8 :: [Bit] -> [Bit]
make8 bits = take 8 (bits ++ repeat 0)

encode :: String -> [Bit]
encode = concat . map (make8 . int2bin . ord)

encode' xs = concat (map (\x -> (make8 (int2bin (ord x)))) xs)

---decode
chop8 :: [Bit] -> [[Bit]]
chop8 [] = []
chop8 bits = take 8 bits : chop8 (drop 8 bits)


decode :: [Bit] -> String
decode = map (chr . bin2int) . chop8

decode' xs = map (\x-> chr(bin2int x)) (chop8 xs)

transmit :: String -> String
transmit = decode . channel . encode

transmit' xs = decode (channel (encode xs))

channel :: [Bit] -> [Bit]
channel = id


--parity

encode'' :: String -> [Bit]
encode'' = concat . map (addparity . make8 . int2bin . ord)

decode'' :: [Bit] -> String
decode'' = map (chr . bin2int . checkparity) . chop9

addparity :: [Bit]->[Bit]
addparity  bs = (parity bs) : bs

parity :: [Bit] -> Bit
parity bs | odd (sum bs) = 1
          |otherwise    = 0

chop9 :: [Bit] -> [[Bit]]
chop9 [] = []
chop9 bs = take 9 bs : chop9 (drop 9 bs)


checkparity :: [Bit] -> [Bit]
checkparity (b:bs)
                  |b == parity bs = bs
                  |otherwise      = error "parity mismatch"

transmit'' :: String -> String
transmit'' = decode'' . channel'' . encode''

channel'' :: [Bit] -> [Bit]
channel'' xs = tail xs

main = print(transmit'' "ciao")