import Data.Char
import Data.List

normalize :: String -> String
normalize = delwhitespace . alltolower . filter isAlphaNum

delwhitespace :: String -> String
delwhitespace xs = [x|x<-xs, x /= ' ']

alltolower :: String -> String
alltolower [] = []
alltolower (x:xs) = toLower x : alltolower xs

dim :: String -> Int
dim xs = ceiling . sqrt . fromIntegral $ length xs

split :: String -> Int -> [String]
split [] n = []
split xs n = (take n xs): (split (drop n xs) n)

split' :: String -> [String]
split' xs = split xs (dim xs)

splitcontrol :: String -> [String]
splitcontrol xs = if (length (split' xs) <= (dim xs)) then split' xs else split xs ((dim xs)-1)

padright :: Int -> String -> String
padright n s
    | length s < n  = s ++ replicate (n - length s) ' '
    | otherwise     = s

addws :: [String] -> [String]
addws xs = map (\x->padright (length (head xs)) x) xs

decode :: String -> String
decode = unwords . transpose . addws . splitcontrol . normalize

main = print(normalize $ decode "If man was meant to stay on the ground, god would have given us roots.")